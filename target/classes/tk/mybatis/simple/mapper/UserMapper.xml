<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <!--建立对象和属性的对应关系-->
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="roleMap" type="tk.mybatis.simple.model.SysRole">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="enabled" column="enabled"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 返回类型为对象 -->
    <!--考虑到性能，最好指定查询列，很少使用*号代替所有列 -->
    <select id="findUserByID" parameterType="int" resultType="tk.mybatis.simple.model.SysUser">
        SELECT *
        FROM sys_user
        WHERE id = #{id}
    </select>
    <!-- 返回类型为之前定义的userMap -->
    <!--考虑到性能，最好指定查询列，很少使用*号代替所有列 -->
    <select id="selectById" resultMap="userMap">
        SELECT *
        FROM sys_user
        WHERE id = #{id}
    </select>

    <!-- #{对象的属性名} 用#号(不用$)可以预编译，避免sql注入 -->
    <insert id="insert">
        INSERT INTO sys_user (
            id, user_name, user_password, user_email, user_info, head_img, create_time
        ) VALUES (
            #{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>
    <!--利用JDBC返回主键自增的值 {useGeneratedKeys="true"} -->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user (
            id, user_name, user_password, user_email, user_info, head_img, create_time
        ) VALUES (
            #{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>
    <!-- 使用selectKey返回主键的值 不同数据库selectKey不同 -->
    <insert id="insert3">
        INSERT INTO sys_user (
        id, user_name, user_password, user_email, user_info, head_img, create_time
        ) VALUES (
        #{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP}
        )
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT last_insert_id()
        </selectKey>
    </insert>

    <select id="selectAll" resultMap="userMap">
        SELECT *
        FROM sys_user

    </select>
    <!-- -->
    <select id="selectRolesByUserId" resultMap="roleMap">
        SELECT
            r.id,
            r.role_name     roleName,
            r.enabled       enabled,
            r.create_by     createBy,
            r.create_time   createTime,
            u.user_name  AS "user.userName",
            u.user_email AS "user.userEamil"
        FROM sys_user u
            INNER JOIN sys_user_role ur ON u.id = ur.user_id
            INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{userId}
    </select>

    <!-- 根据id更新user的信息 -->
    <update id="updateById">
        UPDATE sys_user
        SET
            user_name     = #{userName},
            user_password = #{userPassword},
            user_email    = #{userEmail},
            user_info     = #{userInfo},
            head_img      = #{headImg,jdbcType=BLOB},
            create_time   = #{createTime,jdbcType=TIMESTAMP}
        WHERE id = #{id}
    </update>
    <!-- 根据主键删除列 -->
    <delete id="deleteById">
        DELETE FROM sys_user
        WHERE id = #{id}
    </delete>

    <!-- 多个接口参数（param("userId")）-->
    <!-- 给参数配置@param注解后 mybatis自动将参数封装成Map @param的值成为key 故在SQL部分可以用配置的注解值来使用参数-->
    <!--当参数时javaBean时要通过 对象.属性  比如 (@param("obj") Object obj) 在sql使用的时候就是obj.properties -->
    <select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
        SELECT
            r.id,
            r.role_name   roleName,
            r.enabled     enabled,
            r.create_by   createBy,
            r.create_time createTime
        FROM sys_user u
            INNER JOIN sys_user_role ur ON ur.user_id = u.id
            INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{userId} AND r.enabled = #{enabled}
    </select>

    <select id="selectRolesByUserIdAndRoleEnabledUseJavaBean" resultType="tk.mybatis.simple.model.SysRole">
        SELECT
            r.id,
            r.role_name   roleName,
            r.enabled     enabled,
            r.create_by   createBy,
            r.create_time createTime
        FROM sys_user u
            INNER JOIN sys_user_role ur ON ur.user_id = u.id
            INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{user.id} AND r.enabled = #{role.enabled}
    </select>
</mapper>